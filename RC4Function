<?php
	function encrypt($key,$plaintext){
		
    
    //initializing data
		$ascKeys = unpack("C*", $key); //convert string into array ASCII
		$ascPlains = unpack("C*", $plaintext);

		$lenAscKeys = count($ascKeys); //count index from variable $ascKeys
		$lenAscPlain = count($ascPlains);
    //finish initializing data



		//initalizing keys
		$strkey = array();
		for($i=0;$i<256;$i++){
			array_push($strkey, $i);
		}
    //end of initializing keys




		//padding keys
		if($lenAscKeys < 256){
			for($i=1;$i<256-$lenAscKeys;$i++){
				array_push($ascKeys, $ascKeys[$i]);
			}
		}
    //end of padding keys




		//permutations starts here
		$j=0;
		for($i=1;$i<256;$i++){
			$j = ($j+$strkey[$i]+$ascKeys[$i]) % 256;
			$tmp = $strkey[$i]; //swap beetween Sbox[i] and Sbox[j]
			$strkey[$i] = $strkey[$j];
			$strkey[$j] = $tmp;
		}
    //permutations ends here
   
   
   
   
		//encrypion begins here
		$initI = 0;
		$initJ = 0;
		for($initIdx = 1;$initIdx < $lenAscPlain;$initIdx++){ //loop as long as length of plain text
			$initI = ($initI + 1) % 256;
			$initJ = ($initJ + $strkey[$initI]) % 256;
			$temp = $strkey[$initI]; //swap beetween Sbox[i] and Sbox[j]
			$strkey[$initI] = $strkey[$initJ];
			$strkey[$initJ] = $temp;
			$initT = ($strkey[$initI] + $strkey[$initJ]) % 256;
			$K = $strkey[$initT]; //Stream Key
			$chipertext[$initIdx] = $K^=$ascPlains[$initIdx]; //XOR between "K"(key) with value of corresponding plaintext index
		}
    //encryption begins here
    
    
    
    //final steps
		$chipers = call_user_func_array('pack', array_merge(array('C*'),$chipertext)); //convert ASCII back to strings
		return $chipers; // return value
    //finish
	}
?>
